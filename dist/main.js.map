{"version":3,"file":"main.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA,sDAAsD,0CAA0C;AAChG;AACA;AACA;AACA;AACA;AACA,sDAAsD,0CAA0C;AAChG;AACA;AACA;AACA;AACA;AACA,sDAAsD,sCAAsC;AAC5F;AACA;AACA;AACA;AACA;AACA,sDAAsD,0CAA0C;AAChG;AACA;AACA;AACA;AACA;AACA,sDAAsD,0CAA0C;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,oCAAoC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,KAAK;AACxC;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,kCAAkC,WAAW,gBAAgB;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,QAAQ;AACvF;AACA;AACA;AACA;AACA;;;;;;;;;;AC9KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,wBAAwB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kBAAkB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,4BAA4B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,uBAAuB;AAC9D;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,2BAA2B;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,2BAA2B,QAAQ,KAAK;AAC5H;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,6BAA6B,8CAA8C,QAAQ,aAAa,SAAS,YAAY,QAAQ,GAAG;AAChI,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;;;;;UC7NA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACN2B","sources":["webpack://homework/./src/scripts/components/main.js","webpack://homework/./src/scripts/components/post.js","webpack://homework/webpack/bootstrap","webpack://homework/webpack/runtime/compat get default export","webpack://homework/webpack/runtime/define property getters","webpack://homework/webpack/runtime/hasOwnProperty shorthand","webpack://homework/webpack/runtime/make namespace object","webpack://homework/./src/scripts/main.js"],"sourcesContent":["if (window.location.pathname == '/') {\r\n  window.location.pathname = '/index.html';\r\n}\r\n\r\nif (document.location.pathname === '/index.html') {\r\n  const POSTS_CONTAINER = document.getElementById('posts-box');\r\n  const PAGINATION_CONTAINER = document.getElementById('pagination-box');\r\n  const PAGE_PARAMS = new URLSearchParams(window.location.search);\r\n\r\n  // Создаём бокс пагинации\r\n  async function createPagination(pageNum) {\r\n    const LIST = await getPostsList(pageNum);\r\n    const PAGINATION_BOX = document.createElement('div');\r\n    const PAGINATION_LENGTH = document.createElement('span');\r\n    const PAGINATION_INPUT = document.createElement('input');\r\n\r\n    // Если пагинация уже есть - удаляем\r\n    if (document.querySelector('.pagination__box')) {\r\n      document.querySelector('.pagination__box').remove();\r\n    }\r\n\r\n    // В цикле созаём 5 кнопок пагинации\r\n    for (let i = -2; i < 3; ++i) {\r\n      const PAGINATION_LINK = document.createElement('button');\r\n\r\n      // Если страница === 1, В пагинации начинаем счёт с 1 \r\n      if (Number(LIST.meta.pagination.page) === 1) {\r\n        PAGINATION_LINK.textContent = Number(LIST.meta.pagination.page) + i + 2;\r\n        PAGINATION_LINK.setAttribute('pageNumber', `${Number(LIST.meta.pagination.page) + i + 2}`);\r\n      }\r\n\r\n      // Если страница === 2, В пагинации начинаем счёт с 1 \r\n      if (Number(LIST.meta.pagination.page) === 2) {\r\n        PAGINATION_LINK.textContent = Number(LIST.meta.pagination.page) + i + 1;\r\n        PAGINATION_LINK.setAttribute('pageNumber', `${Number(LIST.meta.pagination.page) + i + 1}`);\r\n      }\r\n\r\n      // Если страница >= 3, но меньше чем -2 от конца списка страниц, активную страницу делаем в центре кнопок пагинации \r\n      if (Number(LIST.meta.pagination.page) > 2 && Number(LIST.meta.pagination.page) <= (Number(LIST.meta.pagination.pages) - 2)) {\r\n        PAGINATION_LINK.textContent = Number(LIST.meta.pagination.page) + i;\r\n        PAGINATION_LINK.setAttribute('pageNumber', `${Number(LIST.meta.pagination.page) + i}`);\r\n      }\r\n      \r\n      // Если страница === -2 от конца списка страниц, пагинация заканчивается концом списка \r\n      if (Number(LIST.meta.pagination.page) === (Number(LIST.meta.pagination.pages)) - 1) {\r\n        PAGINATION_LINK.textContent = Number(LIST.meta.pagination.page) + i - 1;\r\n        PAGINATION_LINK.setAttribute('pageNumber', `${Number(LIST.meta.pagination.page) + i - 1}`);\r\n      }\r\n\r\n      // Если страница === -1 от конца списка страниц, пагинация заканчивается концом списка \r\n      if (Number(LIST.meta.pagination.page) === (Number(LIST.meta.pagination.pages))) {\r\n        PAGINATION_LINK.textContent = Number(LIST.meta.pagination.page) + i - 2;\r\n        PAGINATION_LINK.setAttribute('pageNumber', `${Number(LIST.meta.pagination.page) + i - 2}`);\r\n      }\r\n\r\n      PAGINATION_LINK.classList.add('pagination__btn');\r\n      PAGINATION_BOX.classList.add('pagination__box');\r\n\r\n      // Вешаем отдельный класс на активную старницу\r\n      if (PAGINATION_LINK.getAttribute('pageNumber') == Number(LIST.meta.pagination.page)) {\r\n        PAGINATION_LINK.classList.add('pagination__btn--active');\r\n      }\r\n      \r\n      PAGINATION_BOX.append(PAGINATION_LINK);\r\n    }\r\n    \r\n    PAGINATION_LENGTH.textContent = ` из ${Number(LIST.meta.pagination.pages)} страниц. Быстрый переход:`\r\n    PAGINATION_LENGTH.classList.add('pagination__length')\r\n\r\n    PAGINATION_INPUT.setAttribute('id', 'pagination-number')\r\n    PAGINATION_INPUT.setAttribute('type', 'number')\r\n    PAGINATION_INPUT.setAttribute('min', '1')\r\n    PAGINATION_INPUT.classList.add('pagination__input')\r\n\r\n\r\n    PAGINATION_BOX.append(PAGINATION_LENGTH);\r\n    PAGINATION_BOX.append(PAGINATION_INPUT);\r\n    PAGINATION_CONTAINER.append(PAGINATION_BOX);\r\n\r\n    // Вешаем на кнопки обработчики события для перехода на нужную страницу\r\n    setListenerOnPaginationBtn(LIST);\r\n\r\n    setListenerOnPaginationInput(LIST);\r\n  }\r\n  \r\n  createPagination(PAGE_PARAMS.get('page'));\r\n  \r\n  // Обработчик события 'click' для кнопок пагинации для перехода на нужную страницу\r\n  function setListenerOnPaginationBtn() {\r\n    const PAGINATION_BTN = document.querySelectorAll('.pagination__btn');\r\n  \r\n    PAGINATION_BTN.forEach((e) => {\r\n      const ATTR = e.getAttribute('pageNumber');\r\n\r\n      e.addEventListener('click', () => {\r\n        PAGE_PARAMS.set('page', `${ATTR}`);\r\n        createPagination(PAGE_PARAMS.get('page'));\r\n        createPostsList(PAGE_PARAMS.get('page'));\r\n      });\r\n    });\r\n  }\r\n\r\n  // обработчик события 'input' для ввода номера страницы вручную\r\n  function setListenerOnPaginationInput(LIST) {\r\n    const PAGINATION_INPUT = document.getElementById('pagination-number');\r\n    let inputDelay\r\n    \r\n    function input() {\r\n      PAGE_PARAMS.set('page', PAGINATION_INPUT.value);\r\n      createPagination(PAGE_PARAMS.get('page'));\r\n      createPostsList(PAGE_PARAMS.get('page'));\r\n      }\r\n      \r\n      PAGINATION_INPUT.addEventListener('input', () => {\r\n        // по вводузначения в строку проверяем максимальную страницу и не даём вводить значение больше\r\n        if (PAGINATION_INPUT.value > Number(LIST.meta.pagination.pages)) {\r\n          PAGINATION_INPUT.value = Number(LIST.meta.pagination.pages)\r\n        }\r\n\r\n        // Делаем небольшую задержку вывода информации после ввода страницы\r\n        clearTimeout(inputDelay)\r\n        inputDelay = setTimeout(() => {\r\n          input()\r\n        }, 800);\r\n    });\r\n  }\r\n\r\n// Создаём список постов на выбранной странице\r\n  async function createPostsList(pageNum) {\r\n    const LIST = await getPostsList(pageNum);\r\n\r\n    // Если посты уже есть - удаляем\r\n    if (document.querySelector('.post-prev')) {\r\n      document.querySelectorAll('.post-prev').forEach((e) => {\r\n        e.remove();\r\n      })\r\n    }\r\n\r\n    for (let i = 0; i < LIST.data.length; ++i) {\r\n      const POST = document.createElement('article');\r\n      const USER = document.createElement('p');\r\n      const TITLE = document.createElement('h3');\r\n      const BODY = document.createElement('p');\r\n      const LINK = document.createElement('a');\r\n\r\n      POST.classList.add('post-prev');\r\n      TITLE.classList.add('post-prev__title');\r\n      BODY.classList.add('post-prev__body');\r\n      USER.classList.add('post-prev__user');\r\n      LINK.classList.add('post-prev__link');\r\n\r\n      TITLE.textContent = LIST.data[i].title;\r\n      BODY.textContent = LIST.data[i].body;\r\n      USER.textContent = LIST.data[i].user_id;\r\n\r\n      LINK.setAttribute('href', `post.html?page=${Number(LIST.meta.pagination.page)}&post_id=${LIST.data[i].id}`)\r\n\r\n      POST.append(TITLE);\r\n      POST.append(BODY);\r\n      POST.append(USER);\r\n      POST.append(LINK);\r\n      POSTS_CONTAINER.append(POST);\r\n    }\r\n  }\r\n\r\n  createPostsList(PAGE_PARAMS.get('page'));\r\n\r\n// отпраляем запрос на сервер для получения списка постов \r\n  async function getPostsList(pageNum) {\r\n    const RESPONSE = await fetch(`https://gorest.co.in/public-api/posts?page=${pageNum}`);\r\n    const RESULT = await RESPONSE.json();\r\n\r\n    return RESULT;\r\n  }\r\n}","if (document.location.pathname === '/post.html') {\r\n  const POST_CONTAINER = document.getElementById('post-box');\r\n  const COMMENT_CONTAINER = document.createElement('div');\r\n  const COMMENT_BOX = document.createElement('div');\r\n  const PAGE_PARAMS = new URLSearchParams(window.location.search);\r\n  const BACK_LINK = document.getElementById('post-back-link');\r\n\r\n  COMMENT_CONTAINER.classList.add('comment__container');\r\n  COMMENT_BOX.classList.add('comment__box');\r\n  BACK_LINK.setAttribute('href', `index.html?page=${PAGE_PARAMS.get('page')}`);\r\n\r\n  COMMENT_CONTAINER.append(COMMENT_BOX);\r\n\r\n  // Создаём пост с новостью\r\n  async function createPost() {\r\n    const LIST = await getPostData();\r\n    const POST = document.createElement('article');\r\n    const TITLE = document.createElement('h1');\r\n    const BODY = document.createElement('p');\r\n    const USER = document.createElement('p');\r\n\r\n    TITLE.textContent = LIST.data.title;\r\n    BODY.textContent = LIST.data.body;\r\n    USER.textContent = `ID автора ${LIST.data.user_id}`;\r\n\r\n    POST.classList.add('post__article');\r\n    TITLE.classList.add('post__title');\r\n    BODY.classList.add('post__body');\r\n    USER.classList.add('post__user');\r\n\r\n    POST.append(TITLE);\r\n    POST.append(BODY);\r\n    POST.append(USER);\r\n    POST_CONTAINER.prepend(POST);\r\n  }\r\n  createPost();\r\n\r\n  // Создаём пагинацию для списка комментариев\r\n  async function createPaginationComents(page) {\r\n    const LIST = await getCommentData(page);\r\n    const PAGINATION_BOX = document.createElement('div');\r\n    const COMMENT_TITLE = document.createElement('h2');\r\n    const PAGINATION_INPUT_BOX = document.createElement('div');\r\n    const PAGINATION_INPUT = document.createElement('input');\r\n    const PAGINATION_LENGTH = document.createElement('label');\r\n\r\n    COMMENT_TITLE.textContent = 'Комментарии';\r\n    PAGINATION_INPUT.value = LIST.meta.pagination.page;\r\n    PAGINATION_INPUT.setAttribute('type', 'number');\r\n    PAGINATION_INPUT.setAttribute('min', '1');\r\n    PAGINATION_INPUT.setAttribute('id', 'comment-page-input');\r\n    PAGINATION_LENGTH.textContent = ` из ${LIST.meta.pagination.pages} страниц`;\r\n    PAGINATION_LENGTH.setAttribute('for', 'comment-page-input')\r\n\r\n    PAGINATION_BOX.classList.add('comment__pagination-box')\r\n    COMMENT_TITLE.classList.add('comment__title');\r\n    PAGINATION_INPUT_BOX.classList.add('comment__pagination-input-box')\r\n    PAGINATION_INPUT.classList.add('comment__pagination-input')\r\n    PAGINATION_LENGTH.classList.add('comment__pagination-length')\r\n    \r\n    // Если пагинация уже есть - удаляем\r\n    if (document.querySelector('.comment__pagination-box')) {\r\n      document.querySelector('.comment__pagination-box').remove();\r\n      document.querySelector('.comment__title').remove();\r\n    }\r\n    \r\n    PAGINATION_INPUT_BOX.prepend(PAGINATION_INPUT);\r\n    PAGINATION_INPUT_BOX.append(PAGINATION_LENGTH);\r\n    PAGINATION_BOX.prepend(COMMENT_TITLE);\r\n    PAGINATION_BOX.append(PAGINATION_INPUT_BOX);\r\n    COMMENT_BOX.prepend(PAGINATION_BOX);\r\n\r\n    // Вешаем инпут обработчик события для перехода на нужную страницу\r\n    setListenerOnPaginationInput(LIST);\r\n  }\r\n  createPaginationComents();\r\n\r\n  // Обработчик события 'input' для кнопок пагинации для перехода на нужную страницу\r\n  function setListenerOnPaginationInput(LIST) {\r\n    const PAGINATION_INPUT = document.querySelector('.comment__pagination-input');\r\n    let inputDelay\r\n\r\n    function input() {\r\n      createPaginationComents(PAGE_PARAMS.get('com_page'));\r\n      createComments(PAGE_PARAMS.get('com_page'));\r\n    }\r\n\r\n    // Делаем небольшую задержку между вводом значения и выводом списка\r\n    if (PAGINATION_INPUT) {\r\n      PAGINATION_INPUT.addEventListener('input', () => {\r\n        if (PAGINATION_INPUT.value > LIST.meta.pagination.pages) {\r\n          PAGINATION_INPUT.value = LIST.meta.pagination.pages;\r\n        }\r\n        PAGE_PARAMS.set('com_page', `${PAGINATION_INPUT.value}`)\r\n        clearTimeout(inputDelay)\r\n        inputDelay = setTimeout(() => {\r\n          input();\r\n        }, 300);\r\n      });\r\n    }\r\n  }\r\n\r\n// Создаём форму добавления нового комментария\r\nfunction createFormNewComment() {\r\n  const NEW_COMMENT_CONTAINER = document.createElement('div');\r\n  const NEW_COMMENT_FORM = document.createElement('form');\r\n  const NEW_COMMENT_TITLE = document.createElement('h2');\r\n  const NEW_COMMENT_NAME = document.createElement('input');\r\n  const NEW_COMMENT_EMAIL = document.createElement('input');\r\n  const NEW_COMMENT_BODY = document.createElement('input');\r\n  const NEW_COMMENT_BTN = document.createElement('button');\r\n\r\n  NEW_COMMENT_CONTAINER.classList.add('add-comment');\r\n  NEW_COMMENT_FORM.classList.add('add-comment__form');\r\n  NEW_COMMENT_TITLE.classList.add('add-comment__title');\r\n  NEW_COMMENT_NAME.classList.add('add-comment__name', 'add-comment__input');\r\n  NEW_COMMENT_EMAIL.classList.add('add-comment__email', 'add-comment__input');\r\n  NEW_COMMENT_BODY.classList.add('add-comment__body', 'add-comment__input');\r\n  NEW_COMMENT_BTN.classList.add('add-comment__btn', 'add-comment__input');\r\n\r\n  NEW_COMMENT_TITLE.textContent = 'Добавить новый комментарий';\r\n  NEW_COMMENT_NAME.setAttribute('placeholder', 'Введите имя');\r\n  NEW_COMMENT_NAME.setAttribute('name', 'name');\r\n  NEW_COMMENT_NAME.setAttribute('autocomplete', '');\r\n  NEW_COMMENT_EMAIL.setAttribute('placeholder', 'Введите e-mail');\r\n  NEW_COMMENT_EMAIL.setAttribute('type', 'email');\r\n  NEW_COMMENT_BODY.setAttribute('placeholder', 'Введите комментарий');\r\n  NEW_COMMENT_BODY.setAttribute('type', 'text');\r\n  NEW_COMMENT_BTN.textContent = 'Отправить';\r\n\r\n  // Убираем у формы стандартное поведение создаём новый комментарий, обновляем таблицу и сбрасываем форму\r\n  NEW_COMMENT_FORM.onsubmit = (e) => {\r\n    e.preventDefault();\r\n    createNewComment(NEW_COMMENT_NAME.value.trim(), NEW_COMMENT_EMAIL.value.trim(), NEW_COMMENT_BODY.value.trim());\r\n    NEW_COMMENT_FORM.reset();\r\n    createComments(PAGE_PARAMS.get('com_page'));\r\n  }\r\n\r\n  NEW_COMMENT_FORM.append(NEW_COMMENT_NAME);\r\n  NEW_COMMENT_FORM.append(NEW_COMMENT_EMAIL);\r\n  NEW_COMMENT_FORM.append(NEW_COMMENT_BODY);\r\n  NEW_COMMENT_FORM.append(NEW_COMMENT_BTN);\r\n\r\n  NEW_COMMENT_CONTAINER.prepend(NEW_COMMENT_TITLE);\r\n  NEW_COMMENT_CONTAINER.append(NEW_COMMENT_FORM);\r\n  COMMENT_CONTAINER.prepend(NEW_COMMENT_CONTAINER);\r\n}\r\ncreateFormNewComment();\r\n\r\n  // Создаём список комментариев\r\n  async function createComments(page) {\r\n    const LIST = await getCommentData(page);\r\n\r\n    // Если есть хоть один комментарий, удаляем все\r\n    if (document.querySelector('.comment')) {\r\n      document.querySelectorAll('.comment').forEach((e) => {\r\n        e.remove();\r\n      });\r\n    }\r\n\r\n    // Пробегаемся по массиву коментариев и создаём все\r\n    for (let i in LIST.data) {\r\n      const COMMENT = document.createElement('article');\r\n      const COMMENT_AUTHOR = document.createElement('h3');\r\n      const COMMENT_EMAIL = document.createElement('p');\r\n      const COMMENT_BODY = document.createElement('p');\r\n      COMMENT_AUTHOR.textContent = LIST.data[i].name;\r\n      COMMENT_EMAIL.textContent = `(${LIST.data[i].email})`;\r\n      COMMENT_BODY.textContent = LIST.data[i].body;\r\n\r\n      COMMENT.classList.add('comment');\r\n      COMMENT_AUTHOR.classList.add('comment__author');\r\n      COMMENT_EMAIL.classList.add('comment__email');\r\n      COMMENT_BODY.classList.add('comment__body');\r\n\r\n      COMMENT.append(COMMENT_AUTHOR);\r\n      COMMENT.append(COMMENT_EMAIL);\r\n      COMMENT.append(COMMENT_BODY);\r\n      COMMENT_BOX.append(COMMENT);\r\n    }\r\n\r\n    POST_CONTAINER.append(COMMENT_CONTAINER);\r\n  }\r\n  createComments();\r\n\r\n  // Запрашиваем с сервера данные о посте\r\n  async function getPostData() {\r\n    const REQUEST = await fetch(`https://gorest.co.in/public-api/posts/${PAGE_PARAMS.get('post_id')}`);\r\n    const RESULT = await REQUEST.json();\r\n\r\n    return RESULT;\r\n  }\r\n\r\n  // Запрашиваем с сервера данные о комментариях\r\n  async function getCommentData(page) {\r\n    const REQUEST = await fetch(`https://gorest.co.in/public-api/comments?post_id=${PAGE_PARAMS.get('post_id')}&page=${page}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: 'Bearer 6e3f8db40faa8ff7cc1016ad04528011604ba032f018cca91f5fa2cfb15984d2',\r\n      },\r\n    });\r\n    const RESULT = await REQUEST.json();\r\n\r\n    return RESULT;\r\n  }\r\n\r\n  // Отправляем на сервер запрос на добавление нового комментария\r\n  async function createNewComment(nameVal, emailVal, textVal) {\r\n    const REQUEST = await fetch('https://gorest.co.in/public-api/comments', {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: 'Bearer 6e3f8db40faa8ff7cc1016ad04528011604ba032f018cca91f5fa2cfb15984d2',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ post_id: PAGE_PARAMS.get('post_id'), name: `${nameVal}`, email: `${emailVal}`, body: `${textVal}` }),\r\n    });\r\n    const RESULT = await REQUEST.json();\r\n\r\n    return RESULT;\r\n  }\r\n}\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './components/main';\r\nimport './components/post';"],"names":[],"sourceRoot":""}